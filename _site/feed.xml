<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dsm | A simple blog of ml technical sharings</title>
    <description>A simple blog of ml technical sharings</description>
    <link>http://localhost:4000/dsm/</link>
    <atom:link href="http://localhost:4000/dsm/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 11 Sep 2018 18:58:34 +0200</pubDate>
    <lastBuildDate>Tue, 11 Sep 2018 18:58:34 +0200</lastBuildDate>
    <generator>Jekyll v3.7.3</generator>
    
      <item>
        <title>Sklearn trainning module</title>
        <description>&lt;h3 id=&quot;sklearn-module&quot;&gt;Sklearn module&lt;/h3&gt; &lt;p&gt;When doing model training, especially cross-validation on the training set, we usually need to save the model and then put it on a separate test set. The following is the preservation and reuse of the training model in Python.&lt;/p&gt; &lt;p&gt;In the scikit-learn library, there is already a model persistence operation, just import joblib.&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from sklearn.externals import joblib &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h3 id=&quot;save-the-module&quot;&gt;Save the module&lt;/h3&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;os.chdir(&quot;workspace/model_save&quot;) from sklearn import svm X = [[0, 0], [1, 1]] y = [0, 1] clf = svm.SVC() clf.fit(X, y) clf.fit(train_X,train_y) joblib.dump(clf, &quot;train_model.m&quot;) &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Save the module through the...</description>
        <pubDate>Thu, 19 Mar 2015 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/dsm/Sklearn-trainning-module</link>
        <guid isPermaLink="true">http://localhost:4000/dsm/Sklearn-trainning-module</guid>
        
        <category>Scikit-learn</category>
        
        
        <category>scikit-learn</category>
        
        <category>Python</category>
        
      </item>
    
      <item>
        <title>Solving urlopen and SSL CERTIFICATE_VERIFY_FAILED Error</title>
        <description>&lt;h3 id=&quot;1-a-ssl-certificate-verify-error&quot;&gt;1. A SSL Certificate Verify Error&lt;/h3&gt; &lt;p&gt;If you are the first time to create a crawler which on the way to read contents of some websites, the Python IDLE probably could alert an error, named SSL: CERTIFICATE_VERIFY_FAILED, look like this:&lt;/p&gt; &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;urllib.request&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urlopen&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base_url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;http://www.wikipedia.com&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the_http&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urlopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;and you must got the problem of unable to get local issuer certificate (ssl.c:1045)&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/dsm/img/20150301/Error-Screen.png&quot; alt=&quot;SSL_Certificate&quot; /&gt;&lt;/p&gt; &lt;h3 id=&quot;2-python-ssl-class&quot;&gt;2. Python SSL Class&lt;/h3&gt; &lt;p&gt;&lt;img src=&quot;/dsm/img/20150301/SSL-Certificate-Image.jpeg&quot; alt=&quot;SSL_Certificate&quot; /&gt;&lt;/p&gt; &lt;p&gt;To check this problem,...</description>
        <pubDate>Sun, 01 Mar 2015 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/dsm/Solving-urlopen-and-SSL-CERTIFICATE_VERIFY_FAILED-Error</link>
        <guid isPermaLink="true">http://localhost:4000/dsm/Solving-urlopen-and-SSL-CERTIFICATE_VERIFY_FAILED-Error</guid>
        
        <category>SSL of Python</category>
        
        
        <category>SSL</category>
        
        <category>Crawler</category>
        
        <category>Python</category>
        
        <category>urllib</category>
        
      </item>
    
      <item>
        <title>Using iOS CoreMotion to call gyroscope and accelerometer</title>
        <description>&lt;h3 id=&quot;1-coremotion-framework&quot;&gt;1. CoreMotion Framework&lt;/h3&gt; &lt;p&gt;Core Motion reports motion- and environment-related data from the onboard hardware of iOS devices, including from the accelerometers and gyroscopes, and from the pedometer, magnetometer, and barometer. You use this framework to access hardware-generated data so that you can use it in your app. For example, a game might use accelerometer and gyroscope data to control onscreen game behavior.&lt;/p&gt; &lt;p&gt;You may access this Framework in the following scenarios of one application:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Navigation or orientation in a map-kit function, to help the user get known of his orientation.&lt;/li&gt; &lt;li&gt;Sporting applications to record the distance of a...</description>
        <pubDate>Sun, 19 Oct 2014 00:00:00 +0200</pubDate>
        <link>http://localhost:4000/dsm/Using-iOS-CoreMotion-to-call-gyroscope-and-accelerometer</link>
        <guid isPermaLink="true">http://localhost:4000/dsm/Using-iOS-CoreMotion-to-call-gyroscope-and-accelerometer</guid>
        
        <category>Gyroscope and accelerometer of iOS</category>
        
        
        <category>iOS</category>
        
        <category>CoreMotion</category>
        
        <category>Gyroscope</category>
        
        <category>Accelerometer</category>
        
      </item>
    
  </channel>
</rss>
